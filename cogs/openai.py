from discord.ext import commands
import discord
from discord.commands import Option, slash_command, message_command
from utilities import openai
from utilities.logging import logger

class OpenAI(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    def get_name(self, user):
        if not user.global_name == None:
            uname = user.global_name
        elif not user.nick == None:
            uname = user.nick
        else:
            uname = user.name
        return uname
    
    @message_command(name="Roast This Message")
    async def roast(self, ctx, message: discord.Message):
        await ctx.defer()
        uname = self.get_name(message.author)
        req_uname = self.get_name(ctx.user)
        channel_name = ctx.channel.name
        async with ctx.channel.typing():
            response = openai.generate_roast(message.content, uname)
            logger.info(f"AI roast generated by {req_uname} in {channel_name} on {uname}'s message")
            logger.info(f"Message: {message.content}")
            logger.info(f"Roast: {response}")
            await ctx.respond(response)


    @slash_command(
        default_permissions=True,
        description="Ask CHHBot a question (Beta)",
    )
    async def ask(self, ctx: discord.ApplicationContext, prompt: Option(str, 'Prompt for CHHBot', required=True), hide: Option(bool, "Do you want this to show only for you?", required=False, default=False)):
        await ctx.defer(ephemeral=hide)
        uname = self.get_name(ctx.user)
        channel_name = ctx.channel.name
        if not hide:
            async with ctx.channel.typing():
                response = openai.generate_answer(prompt, uname=uname)
                response = f"{uname} asked: \n{prompt}\n---\n" + response
                logger.info(f"AI response generated by {uname} in {channel_name}")
                logger.info(f"Prompt: {prompt}")
                logger.info(f"Response: {response}")
        else:
            response = openai.generate_answer(prompt, uname=uname)
            logger.info(f"Hidden AI response generated by {uname}")
            logger.info(f"Prompt: {prompt}")
            logger.info(f"Response: {response}")
        await ctx.respond(response, ephemeral=hide)
def setup(bot):
    bot.add_cog(OpenAI(bot))